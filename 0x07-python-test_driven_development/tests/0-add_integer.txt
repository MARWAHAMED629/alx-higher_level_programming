The ``0-add_integer`` module
============================

how to Use ``add_integer``
---------------------

Import function from module:

    >>> add_integer = __import__('0-add_integer').add_integer

passed one Argument.
    >>> add_integer(2)
    100

Test 1 int argument and checks default second:

    >>> add_integer(0)
    98

Test 1 float value:

    >>> add_integer(123.9)
    221

Test 1 negative float:

    >>> add_integer(-95.5)
    3

Test 2 integers:

    >>> add_integer(10, 5)
    15

Test 2 big integers:

    >>> add_integer(999999998, 999999999)
    1999999997

Test a positive, negative integer:

    >>> add_integer(34263478, -89234582395)
    -89200318917

Test a negative, positive integer:

    >>> add_integer(-13947692, 57234)
    -13890458

Test integer and a float:

    >>> add_integer(123, 7.987)
    130

Test float and an integer:

    >>> add_integer(234234.43545, 4352345)
    4586579

Test 2 floats:

    >>> add_integer(0.9, 0.9)
    0

Add the infinity:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Add nan:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

The first arg invalid:

    >>> add_integer("foo", 0)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

The second arg invalid:

    >>> add_integer(123123, [])
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer
 
Adding  both args invalid:

    >>> add_integer(None, None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Adding two strings:

    >>> add_integer("foo", "bar")
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Adding  float overflow:
    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer
